<beans xmlns = "http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = 
   "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc.xsd
   
   ">
   
   <context:component-scan base-package="com.shopping.controller" />
   
   <!-- configure the viewResolver inside the dispatcher-servlet to map the logical name to
   the actual physical name 
   why this viewResolver needs to configure?
   Reason - In the PageController when the URL is mapped to a particular handler method, it gives 
   a view name i.e. - 'page'. But the view name is only the logical name not a physical name, the actual file 
   residing inside views directory. 
   To resolve it we need to tell which view technology we are using.
   So we are using internal resource viewResolver to resolve this. And pass the data 'Greeting' in my view to display.
    
    	
    -->

	<!--Creating bean to Configuring viewResolver  -->
	<bean id="viewResolver"
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/views/" />				
			<property name="suffix" value=".jsp" />			 				
	</bean>
	
	
	<!-- Configuring dispatcher-servlet to load static resources -->
	<mvc:annotation-driven />
	
	<!-- location of static resources -->
	<mvc:resources location="/assets/" mapping="/resources/**" />
	

</beans>


<!-- we created a dispatcher-servlet file for creating the bean to resolve the view for every 
mapping and we are scanning the package where other controllers could be found. -->